<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace:名称空间，写接口的全类名，相当于告诉MyBatis这个配置文件是实现哪个接口的-->
<mapper namespace="study.ch.Dao.TeacherDao">
    <!--查询一-->
    <select id="getTeacherById" resultMap="tea">
        select * from t_teacher where id=#{id}
    </select>

    <!--查询二之使用trim或where和if标签-->
    <select id="getTeacherByCondition" resultMap="tea">
        select *from t_teacher
        <!--trim  prefix -->

        <trim prefix="where" prefixOverrides="and" suffixOverrides="and">
            <!--if：标签用做判断，test用于判断条件
            id!=null:取出javaBean属性中的id的值，判断其是否为空-->
            <if test="id!=null">
                id > #{id} and
            </if>
            <!--判断name不等于null且不等于空串(OGNL表达式)-->
            <if test="name!=null and name!=''">
                 teachername like #{name} and
            </if>
            <if test="birth!=null">
                <!--&lt;为xml的转译字符，代表<小于-->
                birth_date &lt; #{birth} and
            </if>
        </trim>
    </select>

    <!--查询三之使用foreach标签-->
    <select id="getTeacherByIdIn" resultMap="tea">
        select * from t_teacher where id in
        <!--foreach帮我们遍历集合，
                    collection表示要遍历的集合的key
                    close=""以什么结束
                    index="i"索引，如果为list，index指定的遍历保存了当前的索引（下标），
                                              item保存当前遍历元素的值
                                   如果为map，这时index表示保存了当前遍历元素的key
                                              item保存当前遍历元素的值
                    open=""以什么开始
                    item="变量名"，每次遍历出的元数取一个变量名方便引用
                    separator=""设置每个元数之间的分割符
                    -->
        <!--效果（a,b,c...）-->
        <if test="ids.size>0"><!--先判断一下ids集合中是否有元素-->
        <foreach collection="ids" item="id_item" separator="," open="(" close=")">
         #{id_item}
         </foreach> 
        </if>
    </select>

    <!--查询四之使用choose标签-->
    <select id="getTeacherByConditionChoose" resultMap="tea">
    select * from t_teacher
    <where>
        <choose>
            <!--只要前面满足后面都不会执行-->
            <!--当成立执行相当于if-->
            <when test="id!=null"><!--id不为空-->
                id=#{id}
            </when>
            <when test="name!=null and name!=''"><!--name不为空且不为空串-->
                teachername=#{name}
            </when>
            <!--当都不成立执行相当于else,1=1相当于没有加，就是查出所有-->
            <otherwise>
                1=1
            </otherwise>
        </choose>
    </where>
    </select>

    <!--更新，使用set标签
        update t_teacher set xxx=?,xxx=?...where id=?
        -->
    <update id="updateTeacher">
        UPDATE t_teacher
        <set>
            <if test="name!=null and name!=''"><!--name不等于空且不为空串-->
                teachername=#{name}
            </if>
            <if test="course!=null and course!=''"><!--course不等于空且不为空串-->
                class_name=#{course}
            </if>
            <if test="address!=null and address!=''">
                address=#{address}
            </if>
            <if test="birth!=null">
                birth_date=#{birth}
            </if>
        </set>
        <where>

            id=#{id}
        </where>
    </update>

    <!--自定义的结果集-->
    <resultMap id="tea" type="study.ch.Bean.Teacher">
        <id property="id" column="id"/>
        <result property="name" column="teachername"/>
        <result property="course" column="class_name"/>
        <result property="address" column="address"/>
        <result property="birth" column="birth_date"/>
    </resultMap>
</mapper>